f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
clear()
ls()
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq<-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
bye()
quit()
source('~/Documents/Personal/Coursera/Statistical Inference/Project/Project Notes.R')
rexp(n, lambda)
mean(rexp(n, lambda))
mean(rexp(n, lambda))
mean(rexp(n, lambda))
replicate(10, mean(rexp(n, lambda)))
source('~/Documents/Personal/Coursera/Statistical Inference/Project/Project Notes.R')
head(reps)
mean(reps)
source('~/Documents/Personal/Coursera/Statistical Inference/Project/Project Notes.R')
means
source('~/Documents/Personal/Coursera/Statistical Inference/Project/Project Notes.R')
means
stdevs
library(datasets)
data(ToothGrowth)
source('~/Documents/Personal/Coursera/Statistical Inference/Project/Project Notes.R')
summary(ToothGrowth)
ToothGrowth
ttest(len ~ supp, paired=F, data=ToothGrowth)
t.test(len ~ supp, paired=F, data=ToothGrowth)
library(ggplot2)
p <- ggplot(ToothGrowth, aes(supp, len))
graph <- p + geom_boxplot()
print(graph)
dev.off()
source('~/Documents/Personal/Coursera/Statistical Inference/Project/Project Notes.R')
source('~/Documents/Personal/Coursera/Statistical Inference/Project/Project Notes.R')
source('~/.active-rstudio-document')
means
stdevs
source('~/Documents/Personal/Coursera/Statistical Inference/Project/Project Notes.R')
means
stdevs
lapply(ToothGrowth, mean)
lapply(mean, ToothGrowth)
mapply(mean, ToothGrowth)
mean(ToothGrow ~ supp)
summary(ToothGrowth)
summary(ToothGrowth ~ supp)
mean(ToothGrowth$len["supp"="OJ"])
mean(ToothGrowth$len[supp="OJ"])
mean(ToothGrowth$len[ToothGrowth$supp="OJ"])
mean(ToothGrowth[ToothGrowth$supp="OJ"]$len)
mean(ToothGrowth[ToothGrowth$supp="OJ",]$len)
split(ToothGrowth, supp)
split(ToothGrowth, ToothGrowth$supp)
split(ToothGrowth$len, ToothGrowth$supp)
sapply(split(ToothGrowth$len, ToothGrowth$supp), mean)
sapply(split(ToothGrowth$len, ToothGrowth$dose), mean)
tmp <- split(ToothGrowth$len, ToothGrowth$dose)
tmp
tmp$0.5
tmp$`0.5`
t.test(tmp$`0.5`, tmp$`1.0`)
wideCW14 <- subset(ToothGrowth, dose %in% c(0.5, 1.0))
t.test(len ~ supp, paired=F, data=ToothGrowth)
t.test(len ~ dose, paired=F, data=wideCW14)
t.test(len ~ dose, paired=F, data=subset(ToothGrowth, dose %in% c(0.5, 1.0)))
t.test(len ~ dose, paired=F, data=subset(ToothGrowth, dose %in% c(0.5, 1.0)))
t.test(len ~ dose, paired=F, data=subset(ToothGrowth, dose %in% c(0.5, 2.0)))
t.test(len ~ dose, paired=F, data=subset(ToothGrowth, dose %in% c(1.0, 2.0)))
1/(40*.04)
stdevs
stdevs^2
length(reps)
length(reps>5)
sum(reps>5)
sum(reps>5.5)
sum(reps>6)
sum(reps<3)
sum(reps<3 && reps>6)
sum(reps<3 || reps>6)
sum(reps<3,reps>6)
sum(reps>=3 && reps<=6)
sum(reps>=3 & reps<=6)
tmp <- replicate(3, rexp(samplesize, lambda))
tmp
tmp <- sapply(tmp, mean)
tmp
tmp <- replicate(3, rexp(samplesize, lambda))
tmp2 <- sapply(tmp, mean)
tmp2
tmp2 <- sapply(split(tmp), mean)
tmp2 <- mapply(tmp, mean)
tmp2 <- vapply(tmp, mean)
tmp2 <- sapply(t(tmp), mean)
mean(tmp)
tmp2 <- apply(tmp, 2, mean)
tmp2
tmp3 <- apply(tmp, 2, sd)
tmp3
cbind(tmp2,tmp3)
xx <- cbind(tmp2,tmp3)
xx$a <- xx$tmp2+xx$tmp3
xx$a <- xx$tmp2 + xx$tmp3
xx <- data.frame(cbind(tmp2,tmp3))
xx
xx$a <- xx$tmp2 + xx$tmp3
xx
reps <- replicate(numreps, rexp(samplesize, lambda))
repmeans <- apply(reps, 2, mean)
repsds <- apply(reps, 2, sd)
distmean <- mean(repmeans)
distmean
distvariance <- variance(repmeans)
distvariance <- var(repmeans)
distvariance
hist(repmeans)
distsd <- sd(repmeans)
num1sd <- sum(repmeans>(distmean-distsd) & repmeanss<(distmean+distsd))
num1sd <- sum(repmeans>(distmean-distsd) & repmeans<(distmean+distsd))
prop1sd <- num1sd/numreps
prop1sd
truemean <- 1/lambda
crit95 <- 1.96
samplestats < data.frame(cbind(repmeans, repsds))
samplestats <- data.frame(cbind(repmeans, repsds))
samplestats$lower <- samplestats$repmeans - crit95*(samplestats$repsds/sqrt(samplesize))
samplestats$upper <- samplestats$repmeans + crit95*(samplestats$repsds/sqrt(samplesize))
samplestats$covered <- (truemean > samplestats$lower) & (truemean < samplestats$upper)
View(samplestats)
sum(samplestats$covered)
coveredprop <- sum(samplestats$covered)/numsamples
coveredprop <- sum(samplestats$covered)/numreps
coveredprop
library(datasets)
data(ToothGrowth)
library(ggplot2)
p <- ggplot(ToothGrowth, aes(supp, len))
graph <- p + geom_boxplot()
print(graph)
p <- ggplot(ToothGrowth, aes(factor(dose), len))
graph <- p + geom_boxplot()
print(graph)
t.test(len ~ supp, paired=F, data=ToothGrowth)
.05/3
summary(ToothGrowth)
data(mtcars)
summary(mtcars)
?mtcar
?mtcars
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
fit <- lm(mpg ~ as.factor(am) + disp + hp + wt, data=mtcars)
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Regression/Project/Project Notes.R')
summary(fit)
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Regression/Project/Project Notes.R')
summary(fit1)
plot(mpg ~ as.factor(am), data=mtcars)
plot(mpg ~ as.factor(am) + hp, data=mtcars)
plot(mpg ~ hp, color=am, data=mtcars)
plot(mpg ~ hp, type=am, data=mtcars)
plot(mpg, hp, type=am, data=mtcars)
plot(mtcars$mpg, mtcars$hp, type=am, data=mtcars)
plot(mtcars$mpg, mtcars$hp, type=am)
plot(mtcars$mpg, mtcars$hp, color=am)
plot(mtcars$mpg, mtcars$hp, color=mtcars$am)
plot(mpg ~ hp, symbol=am, data=mtcars)
plot(mpg ~ hp, col=am, data=mtcars)
plot(mpg ~ hp, col=am, data=mtcars)
plot(mpg ~ hp, col=am+4, data=mtcars)
plot(mpg ~ hp, col=4am, data=mtcars)
plot(mpg ~ hp, col=4*am, data=mtcars)
plot(mpg ~ hp, col=4*(am+2), data=mtcars)
plot(mpg ~ hp, col=3*(am+2), data=mtcars)
plot(mpg ~ hp, col=3*(am+1), data=mtcars)
plot(mpg ~ hp, col=5*(am+1), data=mtcars)
plot(mpg ~ hp, col=6*(am+1), data=mtcars)
plot(mpg ~ hp, col=7*(am+1), data=mtcars)
plot(mpg ~ hp, col=8*(am+1), data=mtcars)
plot(mpg ~ hp, col=5*(am+1), data=mtcars)
plot(mpg ~ hp, col=6*(am+1), data=mtcars)
plot(mpg ~ hp, col=3*(am+2), data=mtcars)
plot(mpg ~ hp, col=3*(am+3), data=mtcars)
plot(mpg ~ hp, col=2*(am+3), data=mtcars)
plot(mpg ~ hp, col=3*(am+2), data=mtcars)
plot(mpg ~ hp, col=2*(am+4), data=mtcars)
plot(mpg ~ hp, col=5*(am+1), data=mtcars)
plot(mpg ~ hp, col=6*(am+1), data=mtcars)
plot(mpg ~ hp, col=2*(am+3), data=mtcars)
plot(mpg ~ hp, col=2*(am+4), data=mtcars)
plot(mpg ~ hp, col=3*(am+2), data=mtcars)
plot(mpg ~ as.factor(am), data=mtcars)
plot(mpg ~ as.factor(am)*hp, data=mtcars)
plot(mpg ~ as.factor(am)*as.factor(cyl), data=mtcars)
plot(mpg ~ hp, col=3*(am+2), data=mtcars)
abline(fit)
fit1 <- lm(mpg ~ as.factor(am), data=mtcars)
fit2 <- lm(mpg ~ hp*as.factor(am), data=mtcars)
plot(mpg ~ hp, col=3*(am+2), data=mtcars)
abline(fit2)
plot(mpg ~ hp, col=3*(am+2), data=mtcars)
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Regression/Project/Project Notes.R')
anova(fit1,fit2)
anova(fit1,fit2)$prob
anova(fit1,fit2)$pvalue
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Regression/Project/Project Notes.R')
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Regression/Project/Project Notes.R')
anova(fit1,fit3)
anova(fit1,fit4)
anova(fit1,fit5)
anova(fit1,fit6)
anova(fit1,fit7)
anova(fit1,fit8)
anova(fit1,fit9)
anova(fit1,fit10)
anova(fit1,fit2)
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Regression/Project/Project Notes.R')
anova(fit2,fit3)
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Regression/Project/Project Notes.R')
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Regression/Project/Project Notes.R')
anova(fit3,fit4)
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Regression/Project/Project Notes.R')
anova(fit3,fit5)
source('~/.active-rstudio-document')
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Regression/Project/Project Notes.R')
anova(fit3,fit6)
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Regression/Project/Project Notes.R')
anova(fit3,fit7)
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Regression/Project/Project Notes.R')
anova(fit3,fit8)
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Regression/Project/Project Notes.R')
anova(fit3,fit9)
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Regression/Project/Project Notes.R')
anova(fit3,fit10)
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Regression/Project/Project Notes.R')
summary(fit3)
fitx <- lm(mpg ~ as.factor(am)*wt*disp, data=mtcars)
summary(fitx)
summary(fit1)
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Regression/Project/Project Notes.R')
anova(fit1,fit_wt)
summary(fit_wt)
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Regression/Project/Project Notes.R')
anova(fit_wt,fit_wt_disp)
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Regression/Project/Project Notes.R')
anova(fit_wt,fit_wt_hp)
cor(mtcars)
cor.test(mtcars)
cor(mtcars)
plot(mpg ~ as.factor(am), data=mtcars)
manmean <- mean(mtcars$am==1)
manmean
manmean <- mean(mtcars[mtcars$am==1])
manmean <- mean(mtcars$am[mtcars$am==1])
manmean
manmean <- mean(mtcars$mpg[mtcars$am==1])
manmean
fit <- lm(mpg ~ as.factor(am), data=mtcars)
summary(fit)
fit$coeff
fit$se
fit$error
fit$errors
anova(fit,fit_wt
)
summary(fit_wt)
plot(mpg ~ wt, col=3*(am+2), data=mtcars)
abline(mpg~wt,data=mtcars)
abline(fit)
abline(fit_wt)
plot(mpg ~ wt, col=3*(am+2), data=mtcars)
fit_0 <- lm(mpg ~ wt, data=mtcars[mtcars$am==0])
fit_0 <- lm(mpg ~ wt, data=mtcars[mtcars$am==0,])
fit_1 <- lm(mpg ~ wt, data=mtcars[mtcars$am==1,])
plot(mpg ~ wt, col=3*(am+2), data=mtcars)
abline(fit_0)
abline(fit_1)
plot(mpg ~ wt, col=3*(am+2), data=mtcars)
abline(fit_0, col=6)
abline(fit_1, col=9)
residuals(fit)
summary(residuals(fit_wt))
plot(residuals(fit_wt))
abline(0)
abline(a=0)
abline(a=0,b=0)
plot(residuals(fit_0))
abline(a=0,b=0)
plot(residuals(fit_1))
abline(a=0,b=0)
summary(dfbetas(fit_wt))
plot(dfbetas(fit_wt))
plot(hatvalues(fit_wt))
plot(residuals(fit_0))
points(residuals(fit_0), col=6)
plot(residuals(fit_0), col=6)
points(residuals(fit_1), col=9)
plot(residuals(fit_0))
abline(a=0,b=0)
points(residuals(fit_1), col=9)
plot(residuals(fit_1))
abline(a=0,b=0)
residuals(fit_1)
plot(hatvalues(fit_1))
plot(hatvalues(fit_0))
plot(hatvalues(fit_1))
plot(hatvalues(fit_0))
crossval_0 <- resid(fit_0)/(1 - hatvalues(fit_0))
crossval_1 <- resid(fit_1)/(1 - hatvalues(fit_1))
plot(crossval_1)
plot(crossval_0)
plot(crossval_1)
mtcars
mtcars[12,]
mtcars[16,]
mtcars[18,]
mtcars[20,]
tmp <- subset(mtcars,-c(18,20))
tmp <- subset(mtcars,select=-c(18,20))
tmp
tmp <- subset(mtcars,subset=-c(18,20))
tmp <- mtcars[c(1,2,5),]
tmp
tmp <- mtcars[-c(1,2,5),]
tmp
tmp <- mtcars[-c(18,20),]
tmp
subsetcars <- mtcars[-c(18,20),]
fit_subset <- lm(mpg ~ as.factor(am)*wt, data=subsetcars)
summary(fit_subset)
plot(mpg ~ wt, col=3*(am+2), data=subsetcars)
plot(mpg ~ wt, col=3*(am+2), data=mtcars)
summary(fit_wt)
fit_wt_cyl <- lm(mpg ~ as.factor(am)*wt*as.factor(cyl), data=mtcars)
anova(fit_wt, fit_wt_cyl)
?mtcars
summary(fit)
summary(fit_wt)
plot(mpg ~ as.factor(am), data=mtcars, main="Fig. 2 - MPG by Transmission Type")
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Practical Machine Learning WI14/Week4/Q2script.R')
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Practical Machine Learning WI14/Week4/Q2script.R')
head(training)
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Practical Machine Learning WI14/Week4/Q2script.R')
head(rfPred)
stacked <- data.frame(cbind(training$diagnosis, rfPred, gbmPred, ldaPred))
head(stacked)
modstack <- train(V1 ~ ., data=stacked, method="rf", prox=TRUE)
stackPred <- predict(modstack, newdata=testing)
names(stacked)
names(stacked)[1] <- "diagnosis"
names(stacked)
modstack <- train(diagnosis ~ ., data=stacked, method="rf", prox=TRUE)
rfTest <- predict(modrf, newdata=testing)
gbmTest <- predict(modgbm, newdata=testing)
ldaTest <- predict(modlda, newdata=testing)
stackTest <- data.frame(cbind(testing$diagnosis, rfTest, gbmTest, ldaTest))
names(stackTest)[1] <- "diagnosis"
names(stackTest)
stackPred <- predict(modstack, newdata=stackTest)
summary(stackPred)
names(stackTest) <- names(stacked)
names(stackTest)
stackPred <- predict(modstack, newdata=stackTest)
rfAcc <- sum(stackTest$diagnosis==stackTest$rfPred)
rfAcc <- sum(stackTest$diagnosis==stackTest$rfPred)/length(stackTest$diagnosis)
gbmAcc <- sum(stackTest$diagnosis==stackTest$gbmPred)/length(stackTest$diagnosis)
ldaAcc <- sum(stackTest$diagnosis==stackTest$ldaPred)/length(stackTest$diagnosis)
stackAcc <- sum(stackTest$diagnosis==stackPred)/length(stackTest$diagnosis)
rfAcc
gbmAcc
ldaAcc
stackAcc
head(stackTest)
head(stackPred)
stackPred <- as.factor(predict(modstack, newdata=stackTest))
head(stackPred)
stackAcc <- sum(stackTest$diagnosis==stackPred)/length(stackTest$diagnosis)
stackAcc
head(stacked)
summary(stacked)
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Practical Machine Learning WI14/Week4/Q2script.R')
rfAcc
gbmAcc
ldaAcc
stackAcc
head(stacked)
summary(stacked)
stacked <- data.frame(as.factor(cbind(training$diagnosis, rfPred, gbmPred, ldaPred)))
summary(stacked)
stacked <- data.frame(as.factor(cbind(training$diagnosis), as.factor(rfPred), as.factor(gbmPred), as.factor(ldaPred))
)
stacked <- data.frame(cbind(as.factor(training$diagnosis), as.factor(rfPred), as.factor(gbmPred), as.factor(ldaPred)))
summary(stacked)
stacked <- cbind(as.factor(training$diagnosis), as.factor(rfPred), as.factor(gbmPred), as.factor(ldaPred))
summary(stacked)
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Practical Machine Learning WI14/Week4/Q3script.R')
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Practical Machine Learning WI14/Week4/Q3script.R')
source('~/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Practical Machine Learning WI14/Week4/Q3script.R')
head(concrete)
mod <- train(CompressiveStrength ~ ., data=concrete, method="lasso")
?plot.enet
summary(mod$finalModel)
xx <- mod$finalModel
plot(xx$penalty,xx$actions,pch=19)
mdl <- enet(as.matrix(training[,1:8]), training[,9], lambda = 0)
xx <- mdl$finalModel
plot(xx$penalty,xx$actions,pch=19)
summary(mdl)
xx$penalty
xx$actions
plot(mdl$penalty,mdl$actions,pch=19)
packages()
packageStatus()
installed.packages
installed.packages()
library()
as.numeric(charToRaw("Beau Scott"))
as.numeric(charToRaw(""))
as.numeric(charToRaw("?"))
as.numeric(charToRaw("."))
as.numeric(charToRaw(">"))
as.numeric(charToRaw("<"))
as.numeric(charToRaw("<Beau>"))
summary(cars)
head(cars)
rnorm()
rnorm(5)
rnorm(5,mu=10)
rnorm(5,m=10)
rnorm(5,m=10,s=5)
rnorm(5,m=100,s=5)
rnorm(5,m=100,s=5)
rnorm(15,m=100,s=5)
dnorm(105,m=100,s=5)
pnorm(105,m=100,s=5)
qnorm(105,m=100,s=5)
qnorm(.95,m=100,s=5)
qnorm(.975,m=100,s=5)
pnorm(100,m=100,s=5)
pnorm(110,m=100,s=5)
qnorm(0,m=100,s=5)
qnorm(0.5,m=100,s=5)
qnorm(.25,m=100,s=5)
dnorm(100,m=100,s=5)
dnorm(101,m=100,s=5)
dnorm(99,m=100,s=5)
rnorm(15)
runif(15)
setwd("/Users/bim/Documents/Personal/Coursera/Johns Hopkins Data Science 2014/Developing Data Products Jan15/ttestSim")
getwd()
install.packages("shinyapps")
